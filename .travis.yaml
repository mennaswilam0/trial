name: Test and Generate Reports
on:
  push:
    branches:
      - 'feature/**'
      - 'bugfix/**'
      - 'main'
      - 'staging'
  pull_request:
    branches:
      - 'main'
      - 'staging'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.13"]
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock pytest-html
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run tests with coverage and HTML reports
        run: |
          # Create reports directory
          mkdir -p reports/coverage reports/test-results
          
          # Run tests with coverage and generate HTML reports
          pytest test_calculator.py -v \
            --cov=calculator \
            --cov-report=html:reports/coverage \
            --cov-report=xml:reports/coverage.xml \
            --cov-report=term-missing \
            --html=reports/test-results/report-py${{ matrix.python-version }}.html \
            --self-contained-html \
            --junitxml=reports/test-results/junit-py${{ matrix.python-version }}.xml
      
      - name: Upload test reports as artifacts
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests fail
        with:
          name: test-reports-py${{ matrix.python-version }}
          path: reports/
          retention-days: 30
      
      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11'  # Only upload once
        with:
          file: reports/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Generate combined report and deploy to GitHub Pages
  deploy-reports:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-reports/
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Create simple report index
        run: |
          mkdir -p public
          
          # Copy all reports to public directory
          for dir in downloaded-reports/test-reports-py*/; do
              if [ -d "$dir" ]; then
                  py_version=$(basename "$dir" | sed 's/test-reports-py//')
                  if [ -d "$dir/reports/coverage" ]; then
                      cp -r "$dir/reports/coverage" "public/coverage-py${py_version}"
                  fi
                  if [ -f "$dir/reports/test-results/report-py${py_version}.html" ]; then
                      cp "$dir/reports/test-results/report-py${py_version}.html" "public/"
                  fi
              fi
          done
          
          # Create simple index
          echo "<h1>Test Reports</h1><ul>" > public/index.html
          for file in public/coverage-py*/index.html; do
              if [ -f "$file" ]; then
                  version=$(echo "$file" | sed 's/.*coverage-py\([0-9.]*\).*/\1/')
                  echo "<li><a href='coverage-py$version/index.html'>Coverage Python $version</a></li>" >> public/index.html
              fi
          done
          for file in public/report-py*.html; do
              if [ -f "$file" ]; then
                  version=$(echo "$file" | sed 's/.*report-py\([0-9.]*\).html/\1/')
                  echo "<li><a href='$(basename $file)'>Tests Python $version</a></li>" >> public/index.html
              fi
          done
          echo "</ul>" >> public/index.html
      
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: public/
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Optional: Post results as PR comment
  comment-pr:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    permissions:
      pull-requests: write
    
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-reports-py3.11  # Use one version for summary
          path: reports/
      
      - name: Parse test results and post comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // You can parse the JUnit XML or coverage XML here
            // and create a nice summary comment on the PR
            
            const comment = `
            ## ðŸ§ª Test Results Summary
            
            **Status:** Tests completed for all Python versions âœ…
            
            **Coverage Report:** Available in workflow artifacts
            
            **Details:** [View full test run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *This comment was automatically generated by GitHub Actions*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
