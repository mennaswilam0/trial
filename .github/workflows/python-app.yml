name: Test and Generate Reports
on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.13"]
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock pytest-html
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run tests with coverage and HTML reports
        run: |
          # Create reports directory
          mkdir -p reports/coverage reports/test-results
          
          # Run tests with coverage and generate HTML reports
          pytest test_calculator.py -v \
            --cov=calculator \
            --cov-report=html:reports/coverage \
            --cov-report=xml:reports/coverage.xml \
            --cov-report=term-missing \
            --html=reports/test-results/report-py${{ matrix.python-version }}.html \
            --self-contained-html \
            --junitxml=reports/test-results/junit-py${{ matrix.python-version }}.xml
      
      - name: Upload test reports as artifacts
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests fail
        with:
          name: test-reports-py${{ matrix.python-version }}
          path: reports/
          retention-days: 30
      
      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11'  # Only upload once
        with:
          file: reports/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Generate combined report and deploy to GitHub Pages
  deploy-reports:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      actions: read  # Added this permission
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-reports/
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Create comprehensive HTML dashboard
        run: |
          mkdir -p public
          
          # Create main index.html with full styling
          cat > public/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Test Reports - ${{ github.repository }}</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                      margin: 0; padding: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                      min-height: 100vh;
                  }
                  .container { 
                      max-width: 1200px; margin: 0 auto; background: white; 
                      padding: 40px; border-radius: 12px; 
                      box-shadow: 0 10px 30px rgba(0,0,0,0.2); 
                  }
                  h1 { 
                      color: #2c3e50; font-size: 2.5em; margin-bottom: 10px;
                      border-bottom: 4px solid #3498db; padding-bottom: 15px; 
                  }
                  h2 { 
                      color: #34495e; margin-top: 40px; font-size: 1.8em;
                      display: flex; align-items: center; gap: 10px;
                  }
                  .grid { 
                      display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); 
                      gap: 25px; margin: 25px 0; 
                  }
                  .card { 
                      background: linear-gradient(145deg, #f8f9fa, #e9ecef); 
                      padding: 25px; border-radius: 10px; 
                      border-left: 5px solid #3498db; 
                      transition: transform 0.3s ease, box-shadow 0.3s ease;
                  }
                  .card:hover { 
                      transform: translateY(-5px); 
                      box-shadow: 0 8px 25px rgba(0,0,0,0.15); 
                  }
                  .card h3 { 
                      margin-top: 0; color: #2c3e50; font-size: 1.3em;
                      display: flex; align-items: center; gap: 8px;
                  }
                  .links { list-style: none; padding: 0; margin: 15px 0; }
                  .links li { margin: 12px 0; }
                  .links a { 
                      text-decoration: none; color: #3498db; font-weight: 600;
                      display: flex; align-items: center; gap: 8px;
                      padding: 8px 12px; border-radius: 6px;
                      transition: background-color 0.3s ease;
                  }
                  .links a:hover { 
                      background-color: #ecf0f1; text-decoration: none; 
                  }
                  .meta { 
                      background: linear-gradient(145deg, #e8f5e8, #d4edda); 
                      padding: 20px; border-radius: 8px; margin: 25px 0;
                      border-left: 4px solid #27ae60;
                  }
                  .badge { 
                      display: inline-block; padding: 6px 12px; border-radius: 20px; 
                      font-size: 13px; font-weight: bold; margin: 2px;
                  }
                  .badge.success { background: #d4edda; color: #155724; }
                  .badge.info { background: #cce7ff; color: #004085; }
                  .badge.warning { background: #fff3cd; color: #856404; }
                  .stats { 
                      display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); 
                      gap: 15px; margin: 20px 0; 
                  }
                  .stat-box { 
                      text-align: center; padding: 15px; background: #f8f9fa; 
                      border-radius: 8px; border: 2px solid #e9ecef; 
                  }
                  .stat-number { font-size: 2em; font-weight: bold; color: #3498db; }
                  .stat-label { color: #6c757d; font-size: 0.9em; margin-top: 5px; }
                  .python-version { 
                      background: linear-gradient(45deg, #306998, #ffd43b); 
                      color: white; padding: 4px 8px; border-radius: 4px; 
                      font-size: 0.9em; font-weight: bold;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üß™ Test Reports Dashboard</h1>
                  
                  <div class="meta">
                      <strong>üìÅ Repository:</strong> ${{ github.repository }} <br>
                      <strong>üåø Branch:</strong> <span class="badge info">${{ github.ref_name }}</span> <br>
                      <strong>üìù Commit:</strong> <code>${{ github.sha }}</code> <br>
                      <strong>‚è∞ Generated:</strong> $(date -u +"%Y-%m-%d %H:%M:%S UTC") <br>
                      <strong>üîó Workflow:</strong> <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" style="color: #155724;">View Run #${{ github.run_id }}</a>
                  </div>
          
                  <div class="stats">
                      <div class="stat-box">
                          <div class="stat-number" id="python-count">0</div>
                          <div class="stat-label">Python Versions</div>
                      </div>
                      <div class="stat-box">
                          <div class="stat-number" id="test-count">‚úÖ</div>
                          <div class="stat-label">Tests Status</div>
                      </div>
                      <div class="stat-box">
                          <div class="stat-number">üìä</div>
                          <div class="stat-label">Coverage Reports</div>
                      </div>
                  </div>
          
                  <h2>üìä Coverage Reports</h2>
                  <div class="grid" id="coverage-grid">
          EOF
          
          # Copy coverage reports and generate cards
          python_versions=()
          for dir in downloaded-reports/test-reports-py*/; do
              if [ -d "$dir" ]; then
                  py_version=$(basename "$dir" | sed 's/test-reports-py//')
                  python_versions+=("$py_version")
                  if [ -d "$dir/reports/coverage" ]; then
                      cp -r "$dir/reports/coverage" "public/coverage-py${py_version}"
                      cat >> public/index.html << EOF
                      <div class="card">
                          <h3><span class="python-version">Python ${py_version}</span> Coverage</h3>
                          <ul class="links">
                              <li><a href="coverage-py${py_version}/index.html">üìà View Coverage Report</a></li>
                              <li><a href="coverage-py${py_version}/index.html">üìã Line-by-line Analysis</a></li>
                          </ul>
                      </div>
          EOF
                  fi
              fi
          done
          
          cat >> public/index.html << 'EOF'
                  </div>
          
                  <h2>üß™ Test Results</h2>
                  <div class="grid" id="test-grid">
          EOF
          
          # Copy test reports and generate cards
          for dir in downloaded-reports/test-reports-py*/; do
              if [ -d "$dir" ]; then
                  py_version=$(basename "$dir" | sed 's/test-reports-py//')
                  if [ -f "$dir/reports/test-results/report-py${py_version}.html" ]; then
                      cp "$dir/reports/test-results/report-py${py_version}.html" "public/"
                      cat >> public/index.html << EOF
                      <div class="card">
                          <h3><span class="python-version">Python ${py_version}</span> Tests</h3>
                          <ul class="links">
                              <li><a href="report-py${py_version}.html">üß™ Test Results</a></li>
                              <li><a href="report-py${py_version}.html">‚è±Ô∏è Performance Metrics</a></li>
                          </ul>
                      </div>
          EOF
                  fi
              fi
          done
          
          cat >> public/index.html << EOF
                  </div>
          
                  <h2>üìã Additional Resources</h2>
                  <div class="grid">
                      <div class="card">
                          <h3>üîó GitHub Actions</h3>
                          <ul class="links">
                              <li><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">üèÉ Current Workflow Run</a></li>
                              <li><a href="${{ github.server_url }}/${{ github.repository }}/actions">üìã All Workflow Runs</a></li>
                          </ul>
                      </div>
                      <div class="card">
                          <h3>üì¶ Artifacts</h3>
                          <ul class="links">
                              <li><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">‚¨áÔ∏è Download Raw Reports</a></li>
                              <li><a href="${{ github.server_url }}/${{ github.repository }}">üìÅ Repository</a></li>
                          </ul>
                      </div>
                  </div>
          
                  <script>
                      // Update stats
                      document.getElementById('python-count').textContent = '${#python_versions[@]}';
                  </script>
              </div>
          </body>
          </html>
          EOF
      
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: public/
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Optional: Post results as PR comment
  comment-pr:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    permissions:
      pull-requests: write
    
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-reports-py3.11  # Use one version for summary
          path: reports/
      
      - name: Parse test results and post comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // You can parse the JUnit XML or coverage XML here
            // and create a nice summary comment on the PR
            
            const comment = `
            ## üß™ Test Results Summary
            
            **Status:** Tests completed for all Python versions ‚úÖ
            
            **Coverage Report:** Available in workflow artifacts
            
            **Details:** [View full test run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *This comment was automatically generated by GitHub Actions*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
