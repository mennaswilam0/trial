name: Test and Generate Reports
on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.13"]
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock pytest-html
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run tests and generate HTML reports
        run: |
          # Create reports directory
          mkdir -p test-reports/
          
          # Run tests with HTML report showing passed/failed tests
          pytest test_calculator.py -v \
            --html=test-reports/test-report-py${{ matrix.python-version }}.html \
            --self-contained-html \
            --cov=calculator \
            --cov-report=html:test-reports/coverage-py${{ matrix.python-version }} \
            --cov-report=term-missing \
            --junitxml=test-reports/junit-py${{ matrix.python-version }}.xml
      
      - name: Upload reports as artifacts
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests fail
        with:
          name: test-reports-py${{ matrix.python-version }}
          path: test-reports/
          retention-days: 30

  # Commit actual test result HTML files to repository
  commit-test-reports:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-reports/
      
      - name: Organize test reports in repository
        run: |
          # Create/clear test reports directory in repo
          mkdir -p test-results/
          rm -rf test-results/*
          
          # Copy all HTML test reports
          for dir in downloaded-reports/test-reports-py*/; do
              if [ -d "$dir" ]; then
                  py_version=$(basename "$dir" | sed 's/test-reports-py//')
                  
                  # Copy the HTML test report (shows passed/failed tests)
                  if [ -f "$dir/test-reports/test-report-py${py_version}.html" ]; then
                      cp "$dir/test-reports/test-report-py${py_version}.html" "test-results/"
                      echo "✅ Copied test report for Python ${py_version}"
                  fi
                  
                  # Copy coverage HTML reports
                  if [ -d "$dir/test-reports/coverage-py${py_version}" ]; then
                      cp -r "$dir/test-reports/coverage-py${py_version}" "test-results/"
                      echo "✅ Copied coverage report for Python ${py_version}"
                  fi
                  
                  # Copy JUnit XML (for programmatic access)
                  if [ -f "$dir/test-reports/junit-py${py_version}.xml" ]; then
                      cp "$dir/test-reports/junit-py${py_version}.xml" "test-results/"
                      echo "✅ Copied JUnit XML for Python ${py_version}"
                  fi
              fi
          done
      
      - name: Create simple index file
        run: |
          cat > test-results/README.md << 'EOF'
          # Test Results
          
          This directory contains test reports generated automatically by GitHub Actions.
          
          ## 🧪 Test Reports (Pass/Fail Details)
          
          These HTML files show which tests passed or failed:
          
          EOF
          
          # Add links to test reports
          for file in test-results/test-report-py*.html; do
              if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  py_version=$(echo "$filename" | sed 's/test-report-py\([0-9.]*\)\.html/\1/')
                  echo "- [Python ${py_version} Test Results](./$filename)" >> test-results/README.md
              fi
          done
          
          cat >> test-results/README.md << 'EOF'
          
          ## 📊 Coverage Reports
          
          These show which lines of code are covered by tests:
          
          EOF
          
          # Add links to coverage reports
          for dir in test-results/coverage-py*/; do
              if [ -d "$dir" ]; then
                  dirname=$(basename "$dir")
                  py_version=$(echo "$dirname" | sed 's/coverage-py//')
                  echo "- [Python ${py_version} Coverage Report](./$dirname/index.html)" >> test-results/README.md
              fi
          done
          
          cat >> test-results/README.md << EOF
          
          ## 📋 Raw Data (XML)
          
          JUnit XML files for programmatic access:
          
          EOF
          
          # Add links to XML files
          for file in test-results/junit-py*.xml; do
              if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  py_version=$(echo "$filename" | sed 's/junit-py\([0-9.]*\)\.xml/\1/')
                  echo "- [Python ${py_version} JUnit XML](./$filename)" >> test-results/README.md
              fi
          done
          
          cat >> test-results/README.md << EOF
          
          ---
          
          **Last Updated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
          **From Commit**: \`${{ github.sha }}\`  
          **Branch**: \`${{ github.ref_name }}\`  
          **Workflow**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF
      
      - name: List what we're about to commit
        run: |
          echo "📁 Files being committed to test-results/:"
          ls -la test-results/
          echo ""
          echo "📄 Test report files:"
          ls -la test-results/*.html 2>/dev/null || echo "No HTML files found"
          echo ""
          echo "📊 Coverage directories:"
          ls -d test-results/coverage-py*/ 2>/dev/null || echo "No coverage directories found"
      
      - name: Commit test reports
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all test result files
          git add test-results/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🧪 Update test reports
            
            Test results for commit ${{ github.sha }}
            
            Files updated:
            $(ls test-results/*.html 2>/dev/null | sed 's/test-results\//- /' || echo '- No HTML files')
            $(ls -d test-results/coverage-py*/ 2>/dev/null | sed 's/test-results\//- /' | sed 's/\///' || echo '- No coverage dirs')
            
            Branch: ${{ github.ref_name }}
            Workflow: ${{ github.run_id }}
            Updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            
            git push
            echo "✅ Test reports committed and pushed!"
          fi

  # Comment on PR with direct links to test files
  comment-pr:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    permissions:
      pull-requests: write
    
    steps:
      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `
            ## 🧪 Test Results Summary
            
            **Status:** Tests completed for all Python versions ✅
            
            **📄 Test Reports (after merge to main/staging):**
            - [Python 3.9 Results](https://github.com/${{ github.repository }}/blob/main/test-results/test-report-py3.9.html)
            - [Python 3.10 Results](https://github.com/${{ github.repository }}/blob/main/test-results/test-report-py3.10.html)
            - [Python 3.11 Results](https://github.com/${{ github.repository }}/blob/main/test-results/test-report-py3.11.html)
            - [Python 3.13 Results](https://github.com/${{ github.repository }}/blob/main/test-results/test-report-py3.13.html)
            
            **📊 Coverage Reports:**
            - [Python 3.9 Coverage](https://github.com/${{ github.repository }}/blob/main/test-results/coverage-py3.9/index.html)
            - [Python 3.10 Coverage](https://github.com/${{ github.repository }}/blob/main/test-results/coverage-py3.10/index.html)
            - [Python 3.11 Coverage](https://github.com/${{ github.repository }}/blob/main/test-results/coverage-py3.11/index.html)
            - [Python 3.13 Coverage](https://github.com/${{ github.repository }}/blob/main/test-results/coverage-py3.13/index.html)
            
            **📁 Browse All:** [test-results/ directory](https://github.com/${{ github.repository }}/tree/main/test-results)
            
            ---
            *Test reports show detailed pass/fail status for each test*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
